{"version":3,"sources":["components/button/button.style.ts","components/chart/chart.style.ts","components/input/input.style.ts","App.style.ts","components/button/button.tsx","components/chart/chart.tsx","components/input/input.tsx","App.tsx","serviceWorker.ts","index.tsx","utils/utils.ts"],"names":["Button","styled","button","props","hovered","ChartWrapper","div","Symbol","p","Input","input","App","Calendars","require","mouseEnter","setState","mouseLeave","state","this","onClick","text","onMouseEnter","onMouseLeave","React","Chart","chartTimeSeries","symbol","avg","computeAveragePrice","length","width","height","data","dataKey","stroke","strokeDasharray","type","y","value","toFixed","position","fill","fontWeight","StyledInput","onChange","placeholder","utils","inputValue","startDate","Date","endDate","filteredSeries","e","handleInputChange","callVantageApi","minDate","maxDate","date","onChangeCalendarStartDate","onChangeCalendarEndDate","sliceDate","request","createAlphaVantageRequestInfo","fetch","then","res","json","console","warn","convertTimeSeries","copyChartTimeSeries","filter","timeSeries","target","stockSymbol","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","result","Object","keys","forEach","item","price","parseFloat","push","reverse","stockData","map","reduce","a","b"],"mappings":"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","file":"static/js/main.7445c8df.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Button = styled.button<{ hovered: Boolean }>`\r\n    display: inline-block;\r\n    border-radius: 3px;\r\n    padding: 0.5rem 0;\r\n    margin: 0.5rem 1rem;\r\n    width: 11rem;\r\n    height: 40px;\r\n    background: ${props => props.hovered ? 'black' : 'transparent'};\r\n    color: ${props => props.hovered ? 'white' : 'black'};\r\n    border: 2px solid grey;\r\n    cursor: pointer;\r\n`;","import styled from 'styled-components';\r\n\r\nexport const ChartWrapper = styled.div`\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-top: 30px;\r\n`;\r\n\r\nexport const Symbol = styled.p`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-weight: 600;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Input = styled.input`\r\n  padding: 0.5em;\r\n  color: black;\r\n  border-color: black;\r\n  border-width: 1px;\r\n  border-style: solid;\r\n  background: rgb(250,250,250);\r\n  border-radius: 3px;\r\n  width: 100px;\r\n  height: 25px;\r\n  margin-left:50px;\r\n  margin-top: 50px;\r\n`;\r\n","import styled from 'styled-components';\n\nexport const App = styled.div`\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n`;\n\nexport const Calendars = styled.div`\n  margin-top: 20px;\n  margin-left: 60px;\n  display: flex;\n  flex-direction: row;\n  width: 950px;\n  justify-content: space-between;\n  align-items: flex-start;\n`;\n\n\n/* .App {\n  text-align: center;\n}\n\n.App-logo {\n  height: 40vmin;\n  pointer-events: none;\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  .App-logo {\n    animation: App-logo-spin infinite 20s linear;\n  }\n}\n\n.App-header {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n}\n\n.App-link {\n  color: #61dafb;\n}\n\n@keyframes App-logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n} */\n","import * as React from 'react';\r\nlet styled = require('./button.style');\r\n\r\ninterface Props { \r\n    onClick: () => void;\r\n    text: string;\r\n}\r\n\r\ninterface State {\r\n    hovered: boolean;\r\n}\r\n\r\nexport class Button extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            hovered: false,\r\n        }\r\n    }\r\n\r\n    mouseEnter = () => {\r\n        this.setState({ hovered: true });\r\n    }\r\n    mouseLeave = () => {\r\n        this.setState({ hovered: false });\r\n    }\r\n\r\n    public render() {\r\n        const { onClick, text } = this.props;\r\n        const { hovered } = this.state;\r\n\r\n        return (\r\n            <styled.Button\r\n                hovered={hovered}\r\n                onMouseEnter={this.mouseEnter}\r\n                onMouseLeave={this.mouseLeave} \r\n                onClick={() => onClick()}>\r\n                {text}\r\n            </styled.Button>\r\n        )\r\n    }\r\n}","import { pricesMock } from './chart.utils';\r\nimport { computeAveragePrice, EasyTimeSeries } from '../../utils/utils';\r\nimport * as React from 'react';\r\nimport {\r\n    CartesianGrid,\r\n    Label,\r\n    Line,\r\n    LineChart,\r\n    ReferenceLine,\r\n    Tooltip,\r\n    XAxis,\r\n    YAxis\r\n    } from 'recharts';\r\nlet styled = require('./chart.style');\r\n\r\ninterface Props {\r\n    chartTimeSeries: EasyTimeSeries[];\r\n    symbol: string;\r\n}\r\n\r\ninterface State { }\r\n\r\nexport class Chart extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {};\r\n    }\r\n\r\n\r\n    public render() {\r\n        const { chartTimeSeries, symbol } = this.props;\r\n        let avg = computeAveragePrice(chartTimeSeries);\r\n\r\n        return (\r\n            <styled.ChartWrapper>\r\n                <styled.Symbol>\r\n                    {chartTimeSeries.length ? symbol : 'Search a Symbol'}\r\n                </styled.Symbol>\r\n                {\r\n                    <LineChart width={1500} height={450} data={chartTimeSeries}>\r\n                        <XAxis dataKey='date' />\r\n                        <YAxis dataKey='price' />\r\n                        <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\" />\r\n                        <Line type=\"monotone\" dataKey=\"price\" stroke=\"blue\" />\r\n                        <Tooltip />\r\n                        <ReferenceLine y={avg} stroke=\"black\" strokeDasharray='5 10'>\r\n                            <Label value={`avg: ${(avg).toFixed(2)}`} position='insideLeft' fill='brown' fontWeight='bold' />\r\n                        </ReferenceLine>\r\n                    </LineChart>\r\n                }\r\n            </styled.ChartWrapper>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n","import * as React from 'react';\r\nlet styled = require('./input.style');\r\n\r\ninterface Props { \r\n    onChange: (e: any) => void;\r\n}\r\n\r\n\r\ninterface State { \r\n\r\n}\r\n\r\nexport class StyledInput extends React.Component<Props,State> {\r\n\r\n    constructor(props: Props) {\r\n\r\n        super(props);\r\n\r\n        this.state = { \r\n\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        const { onChange } = this.props;\r\n\r\n        return (\r\n            <styled.Input onChange={onChange} type='text' placeholder={'Choose a Unit..'}/>\r\n        )\r\n    }\r\n}","import { EasyTimeSeries } from './utils/utils';\nimport { Button } from '../src/components/button/button';\nimport { Chart } from '../src/components/chart/chart';\nimport { StyledInput } from '../src/components/input/input';\nimport React from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nlet styled = require('./App.style');\nlet utils = require('./utils/utils')\n\n\ninterface Props { }\n\ninterface State {\n  inputValue: string;\n  chartTimeSeries: EasyTimeSeries[];\n  startDate: Date;\n  endDate: Date;\n  filteredSeries: EasyTimeSeries[];\n}\n\nexport class App extends React.Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      inputValue: '',\n      chartTimeSeries: [],\n      startDate: new Date(),\n      endDate: new Date(),\n      filteredSeries: null as any,\n    }\n  }\n\n  public render() {\n    const { chartTimeSeries, filteredSeries, startDate, endDate, inputValue } = this.state;\n\n    return (\n      <styled.App>\n        <StyledInput onChange={(e: any) => this.handleInputChange(e)} />\n        <Button onClick={() => this.callVantageApi()} text={'Fetch Stock Values'} />\n        <Chart\n          symbol={!!inputValue ? inputValue : 'Symbol'}\n          chartTimeSeries={filteredSeries !== null ? filteredSeries : chartTimeSeries} />\n\n        <styled.Calendars>\n          <Calendar\n            minDate={new Date(\"2000-01-01\")}\n            maxDate={new Date()}\n            onChange={(date) => this.onChangeCalendarStartDate(date)}\n            value={startDate}\n          />\n\n          <Calendar\n            minDate={new Date(\"2000-01-01\")}\n            maxDate={new Date()}\n            onChange={(date) => this.onChangeCalendarEndDate(date)}\n            value={endDate}\n          />\n\n          <Button onClick={() => this.sliceDate()} text={'Slice Dates'} />\n\n        </styled.Calendars>\n\n      </styled.App>\n    )\n  }\n\n  public componentDidMount() {\n    let request = utils.createAlphaVantageRequestInfo('amzn');\n\n    fetch(request)\n      .then(\n        (res) => {\n          return res.json();\n        }\n      )\n      .then(\n        (data) => {\n          if (data['Error Message']) {\n            console.warn('<!> Error')\n            return;\n          }\n          this.setState({\n            chartTimeSeries: utils.convertTimeSeries(data),\n          });\n        }\n\n      )\n  }\n\n  private sliceDate() {\n    const { chartTimeSeries, startDate, endDate } = this.state;\n    let copyChartTimeSeries = chartTimeSeries;\n\n\n    copyChartTimeSeries = copyChartTimeSeries.filter(timeSeries => new Date(timeSeries.date) >= startDate && new Date(timeSeries.date) <= endDate)\n\n    this.setState({\n      filteredSeries: copyChartTimeSeries\n    })\n  }\n\n  private onChangeCalendarStartDate(date: any) {\n    this.setState({\n      startDate: date\n    })\n  }\n\n  private onChangeCalendarEndDate(date: any) {\n    this.setState({\n      endDate: date\n    })\n  }\n\n  private handleInputChange(e: any) {\n    this.setState({\n      inputValue: e.target.value\n    })\n  }\n\n  private callVantageApi() {\n    this.setState({\n      filteredSeries: null as any,\n    })\n    const { inputValue } = this.state;\n    let stockSymbol = inputValue;\n\n    let request = utils.createAlphaVantageRequestInfo(stockSymbol);\n\n    fetch(request)\n      .then(\n        (res) => {\n          return res.json();\n        }\n      )\n      .then(\n        (data) => {\n          if (data['Error Message']) {\n            console.warn('<!> Error')\n            return;\n          }\n          this.setState({\n            chartTimeSeries: utils.convertTimeSeries(data),\n          });\n        }\n\n      )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export interface EasyTimeSeries {\r\n    date: string;\r\n    price: number;\r\n}\r\n\r\n\r\nexport const convertTimeSeries = (data: any): EasyTimeSeries[] => {\r\n    let result: EasyTimeSeries[] = [];\r\n    const timeSeries = data[\"Monthly Time Series\"];\r\n\r\n    Object.keys(timeSeries).forEach((date) => {\r\n        let item: EasyTimeSeries = {\r\n            date: date,\r\n            price: parseFloat(timeSeries[date][\"1. open\"]),\r\n        };\r\n\r\n        result.push(item);\r\n    });\r\n\r\n    return result.reverse();\r\n};\r\n\r\nexport const createAlphaVantageRequestInfo = (\r\n    stockSymbol: string\r\n): string => {\r\n    const PROVIDER = \"https://www.alphavantage.co/\";\r\n    const API_KEY = \"0PFFVYQJNUDFZX8K\";\r\n    const REQUEST_INFO = `${PROVIDER}query?function=TIME_SERIES_MONTHLY&symbol=${stockSymbol}&interval=5min&outputsize=compact&apikey=${API_KEY}`;\r\n\r\n    return REQUEST_INFO;\r\n};\r\n\r\nexport const computeAveragePrice = (stockData: EasyTimeSeries[]): number => {\r\n\r\n    let prices = stockData.map((value) => value.price)\r\n    let sum = prices.reduce((a, b) => a + b, 0)\r\n    let average = sum / stockData.length\r\n\r\n    return average\r\n}\r\n"],"sourceRoot":""}